#!/bin/sh

hflg=0
aflg=0
fflg=0
mflg=0
rflg=0
pflg=0
fflg=0
cflg=0

if test $# -eq 0 ;then
	hflg=1
elif test $1 = "help" ;then
	hflg=1
fi

while getopts ha:m:rpf:c: opt ;do
	case $opt in
		h)hflg=1;;
		a)aflg=1;aarg=$OPTARG;;
		m)mflg=1;marg=$OPTARG;;
		r)rflg=1;;
		p)pflg=1;;
		f)fflg=1;farg=$OPTARG;;
		c)cflg=1;carg=$OPTARG;;
	esac
done
shift $(($OPTIND - 1))

if test $hflg -eq 1 ;then
	echo -n "Usage: git2 [clone] [add [file]] [branch]
            [branch [existed_branch]] [branch -a] [branch rmremote] [branch [not_existed_branch]]
            [commit] [merge [branch]] [push [branch]] [cm [branch]] [cp [branch]]
            [cmp [branch]] [ac [file]] [acm [file] [branch]] [acp [file] [branch]]
            [acmp [file] [branch]] [rmindex] [add_alias]
 clone : _____________________ super clone
 status: _____________________ super status
 add [file]: _________________ super add
 diff [file]: ________________ super diff
 branch: _____________________ show branch
 branch -a: __________________ show branch all
 branch -d [branch]: _________ delete branch
 branch [existed_branch]: ____ checkout
 branch [not_existed_branch]:_ create branch -> checkout
 branch rmremote: ____________ git remote prune origin
 commit: _____________________ super commit
 merge [branch]: _____________ checkout -> merge preview_branch -> checkout preview_branch
 push [branch]: ______________ checkout [branch] -> push -> checkout preview_branch
 cm [branch]: ________________ git2 commit -> git2 merge [branch]
 cp [branch]: ________________ git2 commit -> git2 push [branch]
 cmp [branch]: _______________ git2 commit -> git2 merge [branch] -> git2 push
 mp [branch]: ________________ git2 git2 merge [branch] -> git2 push
 ac [file]: __________________ git2 add [file] -> git2 commit
 acm [file] [branch]: ________ git2 add [file] -> git2 commit -> git2 merge [branch]
 acp [file] [branch]: ________ git2 add -> git2 commit -> git2 push
 acmp [file] [branch]: _______ git2 add [file] -> git2 commit -> git2 merge [branch] -> git2 push
 rmindex [file]: _____________ git2 rm --cache [file]
 add_alias: __________________ add aliases to $HOME/.bashrc ( You have to check below. )

 [+]You can use these default aliases:
 s: status
 a: add
 b: branch
 c: commit
 m: merge
 p: push

 [+]You can use these after use add_alias option:
 gi:     git2
 gis:    git2 status
 gif     git2 diff
 gia:    git2 add
 gic:    git2 commit
 gim:    git2 merge
 gip:    git2 push
 gib:    git2 branch
 gicm:   git2 cm
 gicp:   git2 cp
 gicmp:  git2 cmp
 gimp:   git2 mp
 giac:   git2 ac
 giacm:  git2 acm
 giacp:  git2 acp
 giacmp: git2 acmp
 "
	allrm branch.tmp now.tmp
	exit 0
fi

branchsave(){
	git branch > branch.tmp
	cat branch.tmp | grep -E "\*" | perl -pe "s@\*(.*)@\1@g" > now.tmp
}

if test "$1" = "add_alias" ;then
	if test ! "$(cat $HOME/.bashrc | grep 'alias for git2')" ;then
		echo -n "\n#alias for git2
alias gi='git2'
alias gis='git2 status'
alias gif='git2 diff'
alias gia='git2 add'
alias gic='git2 commit'
alias gim='git2 merge'
alias gip='git2 push'
alias gib='git2 branch'
alias gicm='git2 cm'
alias gicmp='git2 cmp'
alias gimp='git2 mp'
alias giac='git2 ac'
alias giacm='git2 acm'
alias giacmp='git2 acmp'\n
" >> $HOME/.bashrc
	fi
	exit 0
fi

if test $1 = "diff" ;then
  for var in $@ ;do
    if test $var != $1 ;then
      git diff $var
    fi
  done
  exit 0
fi
      
if test $1 = "add" -o $1 = "a" ;then
	git branch
	for var in $@ ;do
		if test ! $var = "add" -o ! $var = "a" ;then
			git add $var
		fi
	done
	git status
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "status" -o $1 = "s" ;then
	git branch
	git status
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "commit" -o $1 = "c" ;then
	branchsave
	git branch
	git status
	msg=""
	while test "$msg" = "" ;do
		echo -n "\n[+]comment : "
		read msg
	done
  message="$msg"
	git commit -m "$message"
	echo "\n[+]COMMIT FINISH!\n"
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "cp" -o "$1" = "commitpush" ;then
	git2 commit
	if test $# -eq 1 ;then
		echo -n "\n[+]push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git2 push master
		else
			echo "\n[+]push stop.\n"
		fi
	else
		git2 push $2
	fi
	exit 0
fi

if test "$1" = "addcommit" -o "$1" = "ac" ;then
	git branch
  arglst=$(echo $@ | perl -pe 's/'$1'//g')
	git add $arglst
	git status
	branchsave
	msg=""
	while test "$msg" = "" ;do
		echo -n "\n[+]comment : "
		read msg
	done
  message="$msg"
  cecho -gf "[+]"$#
  if test $# -eq 2 ;then
    echo ""
    cecho -rf "[+]OK"
    echo ""
    message=""
    set $msg
    for var in $@ ;do
      cecho -rf "[+]Congrats!!!"
      case $var in
        bugfix)message="[bugfix]$(basename $0) : ";;
        bug)message="[bugfix]$(basename $0) : ";;
        b)message="[bugfix]$(basename $0) : ";;
        update)message="[update]$(basename $0) : ";;
        up)message="[update]$(basename $0) : ";;
        u)message="[update]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        n)message="[new]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        add)message="[add]$(basename $0) : ";;
        a)message="[add]$(basename $0) : ";;
        del)message="[delete]$(basename $0) : ";;
        d)message="[delete]$(basename $0) : ";;
        *)message="${message} ${var}";;
      esac
    done
  fi
	git commit -m "$message"
	echo "\n[+]COMMIT FINISH!\n"
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "acp" -o "$1" = "addcommitpush" ;then
	git branch
  arglst=$(echo $@ | perl -pe 's/'$1'//g')
	git add $arglst
	git status
	branchsave
	msg=""
	while test "$msg" = "" ;do
		echo -n "\n[+]comment : "
		read msg
	done
  message="$msg"
  if test $# -eq 3 ;then
    message=""
    set $msg
    for var in $@ ;do
      case $var in
        bugfix)message="[bugfix]$(basename $0) : ";;
        bug)message="[bugfix]$(basename $0) : ";;
        b)message="[bugfix]$(basename $0) : ";;
        update)message="[update]$(basename $0) : ";;
        up)message="[update]$(basename $0) : ";;
        u)message="[update]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        n)message="[new]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        add)message="[add]$(basename $0) : ";;
        a)message="[add]$(basename $0) : ";;
        del)message="[delete]$(basename $0) : ";;
        d)message="[delete]$(basename $0) : ";;
        *)message="${message} ${var}";;
      esac
    done
  fi
	git commit -m "$message"
	echo "\n[+]COMMIT FINISH!\n"
	if test $# -eq 2 ;then
		echo -n "\n[+]push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git2 push master
		else
			echo "\n[+]push stop.\n"
		fi
	else 
		git2 push $3
	fi
	exit 0
fi

if test "$1" = "acm" -o "$1" = "addcommitmerge" ;then
	git branch
  arglst=$(echo $@ | perl -pe 's/'$1'//g')
	git add $arglst
	git status
	branchsave
	msg=""
	while test "$msg" = "" ;do
		echo -n "\n[+]comment : "
		read msg
	done
  message="$msg"
  if test $# -eq 3 ;then
    message=""
    set $msg
    for var in $@ ;do
      case $var in
        bugfix)message="[bugfix]$(basename $0) : ";;
        bug)message="[bugfix]$(basename $0) : ";;
        b)message="[bugfix]$(basename $0) : ";;
        update)message="[update]$(basename $0) : ";;
        up)message="[update]$(basename $0) : ";;
        u)message="[update]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        n)message="[new]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        add)message="[add]$(basename $0) : ";;
        a)message="[add]$(basename $0) : ";;
        del)message="[delete]$(basename $0) : ";;
        d)message="[delete]$(basename $0) : ";;
        *)message="${message} ${var}";;
      esac
    done
  fi
	git commit -m "$message"
	echo "\n[+]COMMIT FINISH!\n"
	if test $# -eq 2 ;then
		echo -n "\n[+]merge master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git checkout master
		else
			echo "\n[+]merge stop.\n"
			git branch
			allrm branch.tmp now.tmp
			exit 0
		fi
	else
		git checkout $3
	fi
	git merge $(cat now.tmp)
	git checkout $(cat now.tmp)
	git branch
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "acmp" -o "$1" = "addcommitmergepush" ;then
	git branch
  arglst=$(echo $@ | perl -pe 's/'$1'//g')
	git add $arglst
	git status
	branchsave
	msg=""
	while test "$msg" = "" ;do
		echo -n "\n[+]comment : "
		read msg
	done
  message="$msg"
  if test $# -eq 3 ;then
    message=""
    set $msg
    for var in $@ ;do
      case $var in
        bugfix)message="[bugfix]$(basename $0) : ";;
        bug)message="[bugfix]$(basename $0) : ";;
        b)message="[bugfix]$(basename $0) : ";;
        update)message="[update]$(basename $0) : ";;
        up)message="[update]$(basename $0) : ";;
        u)message="[update]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        n)message="[new]$(basename $0) : ";;
        new)message="[new]$(basename $0) : ";;
        add)message="[add]$(basename $0) : ";;
        a)message="[add]$(basename $0) : ";;
        del)message="[delete]$(basename $0) : ";;
        d)message="[delete]$(basename $0) : ";;
        *)message="${message} ${var}";;
      esac
    done
  fi
	git commit -m "$message"
	echo "\n[+]COMMIT FINISH!\n"
	if test $# -eq 2 ;then
		echo -n "\n[+]merge&push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git checkout master
			git merge $(cat now.tmp)
			git push
			git checkout $(cat now.tmp)
		else
			echo "\n[+]merge&push stop.\n"
			allrm branch.tmp now.tmp
			exit 0
		fi
	else
		git checkout $3
		git merge $(cat now.tmp)
		git push
		git checkout $(cat now.tmp)
	fi
	allrm branch.tmp now.tmp
	exit 0
fi


if test "$1" = "merge" -o "$1" = "m" ;then
	branchsave
	if test $# -eq 1 ;then
		echo -n "\n[+]merge master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git checkout master
		else
			echo "\n[+]merge stop.\n"
			allrm branch.tmp now.tmp
			exit 0
		fi
	else
		git checkout $2
	fi
	git merge $(cat now.tmp)
	git checkout $(cat now.tmp)
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "push" -o $1 = "p" ;then
	if test "$(png github.com)" = "OK" ;then
		git branch
		echo "\n[+]PUSH ORIGIN MASTER\n"
		branchsave
		if test $# -eq 1 ;then
			echo -n "\n[+]push master,OK? (y/n) : "
			read ans
			if test "$ans" != "n" ;then
				git checkout master
			else
				echo "\n[+]push stop.\n"
				allrm branch.tmp now.tmp
				exit 0
			fi
		else
			git checkout $2
		fi
		git push
		git checkout $(cat now.tmp)
		git branch
		allrm branch.tmp now.tmp
	fi
	exit 0
fi

if test "$1" = "branch" -o "$1" = "b" ;then
	branchsave
	if test $# -eq 1 ;then
		git branch
	fi
	if test $# -ge 2 ;then
		if test "$2" = "-a" ;then
			git branch -a
		elif test "$2" = "rmremote" ;then
			git remote prune origin
		elif test "$2" = "-d" ;then
			git branch -d $3
		elif test ! "$(cat branch.tmp | grep $2)" ;then
			git branch $2
			git checkout $2
			git branch
		else
			git branch
			echo '\n[+]GIT CHECKOUT\n'
			git checkout $2
			git branch
		fi
	fi
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "cm" -o "$1" = "commitmerge" ;then
	git2 commit
	if test $# -eq 1 ;then
		echo -n "\n[+]push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git2 merge master
		else
			echo "\n[+]merge stop.\n"
		fi
	else
		git2 merge $2
	fi
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "cmp" -o "$1" = "commitmergepush" ;then
	git2 commit
	if test $# -eq 1 ;then
		echo -n "\n[+]merge&push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git2 merge master
			git2 push master
		else
			echo "\n[+]merge&push stop.\n"
		fi
	else
		git2 merge $2
		git2 push $2
	fi
	allrm branch.tmp now.tmp
	exit 0
fi

if test "$1" = "mp" -o "$1" = "mergepush" ;then
	if test $# -eq 1 ;then
		echo -n "\n[+]merge&push master,OK? (y/n) : "
		read ans
		if test "$ans" != "n" ;then
			git2 merge master
			git2 push master
		else
			echo "\n[+]merge&push stop.\n"
		fi
	else
		git2 merge $2
		git2 push $2
	fi
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "rmindex" ;then
    arglst=$(echo $@ | perl -pe 's/'$1'//g')
	git rm --cache -r $arglst
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "clone" ;then
	if test $# -eq 3 ;then
		git clone "http://github.com/"$2"/"$3".git"
	elif test $# -eq 4 ;then
		git clone "http://github.com/"$2"/"$3".git "$4
	elif test $# -eq 1 ;then
		echo -n "UserName: "
		read username
		echo -n "Repository: "
		read repository
		echo -n "Directory: "
		read directory
		git clone "http://github.com/"$username"/"$repository".git" $directory
	fi
	allrm branch.tmp now.tmp
	exit 0
fi

if test $1 = "remote"  -o $1 = "r" ;then
	now=$(pwd)
	arg=$(basename ${now})
	echo -n username:
	read user
	git remote rm origin
	git remote add origin https://github.com/${user}/${arg}
	allrm branch.tmp now.tmp
	exit 0
fi
