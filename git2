#!/bin/sh

hflg=0
aflg=0
fflg=0
mflg=0
rflg=0
pflg=0
fflg=0
cflg=0

if test $# -eq 0 ;then
	hflg=1
elif test $1 = "help" ;then
	hflg=1
fi

while getopts ha:m:rpf:c: opt ;do
	case $opt in
		h)hflg=1;;
		a)aflg=1;aarg=$OPTARG;;
		m)mflg=1;marg=$OPTARG;;
		r)rflg=1;;
		p)pflg=1;;
		f)fflg=1;farg=$OPTARG;;
		c)cflg=1;carg=$OPTARG;;
	esac
done
shift $(($OPTIND - 1))

if test $hflg -eq 1 ;then
	echo -n "Usage: git2 [clone] [add [file]] [branch]
	    [branch [existed_branch]] [branch [not_existed_branch]]
	    [commit] [merge [branch]] [push] [cm [branch]] [cmp [branch]] [ac [file]]
	    [acm [file] [branch]] [acmp [file] [branch]] [add_alias]
 clone : _____________________ super clone
 add [file]: _________________ super add
 branch: _____________________ show branch
 branch [existed_branch]: ____ checkout
 branch [not_existed_branch]:_ create branch -> checkout
 commit: _____________________ super commit
 merge [branch]: _____________ checkout -> merge preview_branch -> checkout preview_branch
 push [branch]: ______________ checkout [branch] -> push -> checkout preview_branch
 cp [branch]: ________________ git2 commit -> git2 push [branch]
 cm [branch]: ________________ git2 commit -> git2 merge [branch]
 cmp [branch]: _______________ git2 commit -> git2 merge [branch] -> git2 push
 ac [file]: __________________ git2 add [file] -> git2 commit
 acp [file] [branch]: ________ git2 add -> git2 commit -> git2 push
 acm [file] [branch]: ________ git2 add [file] -> git2 commit -> git2 merge [branch]
 acmp [file] [branch]: _______ git2 add [file] -> git2 commit -> git2 merge [branch] -> git2 push
 add_alias: __________________ add aliases to $HOME/.bashrc ( You have to check below. )

 [+]You can use these default aliases:
 a: add
 b: branch
 c: commit
 m: merge
 p: push

 [+]You can use these after use add_alias option:
 gi:     git2
 gis:    git2 status
 gia:    git2 add
 gic:    git2 commit
 gim:    git2 merge
 gip:    git2 push
 gib:    git2 branch
 gicm:   git2 cm
 gicmp:  git2 cmp
 giac:   git2 ac
 giacm:  git2 acm
 giacmp: git2 acmp
 "
	rmtmp
	exit 0
fi

branchsave(){
	git branch > branch.tmp
	cat branch.tmp | grep -E "\*" | perl -pe "s@\*(.*)@\1@g" > now.tmp
}

if test "$1" = "add_alias" ;then
	if test ! "$(cat $HOME/.bashrc | grep 'alias for git2')" ;then
		echo -n "\n#alias for git2
alias gi='git2'
alias gis='git2 status'
alias gia='git2 add'
alias gic='git2 commit'
alias gim='git2 merge'
alias gip='git2 push'
alias gib='git2 branch'
alias gicm='git2 cm'
alias gicmp='git2 cmp'
alias giac='git2 ac'
alias giacm='git2 acm'
alias giacmp='git2 acmp'\n
" >> $HOME/.bashrc
	fi
	exit 0
fi

if test $1 = "add" -o $1 = "a" ;then
	git branch
	git add $2
	git status
	rmtmp
	exit 0
fi

if test $1 = "status" -o $1 = "s" ;then
	git branch
	git status
	rmtmp
	exit 0
fi

if test $1 = "commit" -o $1 = "c" ;then
	branchsave
	git branch
	git status
	echo -n "\n[+]comment : "
	read msg
	git commit -m "$msg"
	echo "\n[+]COMMIT FINISH!\n"
	rmtmp
	exit 0
fi

if test "$1" = "cp" -o "$1" = "commitpush" ;then
	git2 commit
	if test $# -eq 1 ;then
		git2 push master
	else
		git2 push $2
	fi
	exit 0
fi

if test "$1" = "addcommit" -o "$1" = "ac" ;then
	git branch
	git add $2
	git status
	branchsave
	echo -n "\n[+]comment : "
	read msg
	git commit -m "$msg"
	echo "\n[+]COMMIT FINISH!\n"
	rmtmp
	exit 0
fi

if test "$1" = "acp" -o "$1" = "addcommitpush" ;then
	git add $2
	git2 commit
	if test $# -eq 2 ;then
		git2 push master
	else 
		git2 push $3
	fi
	exit 0
fi

if test "$1" = "acm" -o "$1" = "addcommitmerge" ;then
	git branch
	git add $2
	git status
	branchsave
	echo -n "\n[+]comment : "
	read msg
	git commit -m "$msg"
	echo "\n[+]COMMIT FINISH!\n"
	if test $# -eq 2 ;then
		git checkout master
	else
		git checkout $3
	fi
	git merge $(cat now.tmp)
	git checkout $(cat now.tmp)
	git branch
	rmtmp
	exit 0
fi

if test "$1" = "acmp" -o "$1" = "addcommitmergepush" ;then
	git branch
	git add $2
	git status
	branchsave
	echo -n "\n[+]comment : "
	read msg
	git commit -m "$msg"
	echo "\n[+]COMMIT FINISH!\n"
	if test $# -eq 2 ;then
		git checkout master
		git merge $(cat now.tmp)
		git push
		git checkout $(cat now.tmp)
	else
		git checkout $3
		git merge $(cat now.tmp)
		git push
		git checkout $(cat now.tmp)
	fi
	rmtmp
	exit 0
fi


if test "$1" = "merge" -o "$1" = "m" ;then
	branchsave
	if test $# -eq 1 ;then
		git checkout master
	else
		git checkout $2
	fi
	git merge $(cat now.tmp)
	git checkout $(cat now.tmp)
	rmtmp
	exit 0
fi

if test $1 = "push" -o $1 = "p" ;then
	if test "$(png github.com)" = "OK" ;then
		git branch
		echo "\n[+]PUSH ORIGIN MASTER\n"
		branchsave
		if test $# -eq 1 ;then
			git checkout master
		else
			git checkout $2
		fi
		git push
		git checkout $(cat now.tmp)
		git branch
		rmtmp
	fi
	exit 0
fi

if test "$1" = "branch" -o "$1" = "b" ;then
	branchsave
	if test $# -eq 1 ;then
		git branch
	fi
	if test $# -ge 2 ;then
		if test ! "$(cat branch.tmp | grep $2)" ;then
			git branch $2
			git checkout $2
			git branch
		else
			git branch
			echo '\n[+]GIT CHECKOUT\n'
			git checkout $2
			git branch
		fi
	fi
	rmtmp
	exit 0
fi

if test "$1" = "cm" -o "$1" = "commitmerge" ;then
	git2 commit
	if test $# -eq 1 ;then
		git2 merge master
	else
		git2 merge $2
	fi
	rmtmp
	exit 0
fi

if test "$1" = "cmp" -o "$1" = "commitmergepush" ;then
	git2 commit
	if test $# -eq 1 ;then
		git2 merge master
		git2 push master
	else
		git2 merge $2
		git2 push $2
	fi
	rmtmp
	exit 0
fi

if test $1 = "rmindex" ;then
	git rm --cache $2
	rmtmp
	exit 0
fi

if test $1 = "clone" ;then
	if test $# -eq 3 ;then
		git clone "http://github.com/"$2"/"$3".git"
	elif test $# -eq 4 ;then
		git clone "http://github.com/"$2"/"$3".git "$4
	elif test $# -eq 1 ;then
		echo -n "UserName: "
		read username
		echo -n "Repository: "
		read repository
		echo -n "Directory: "
		read directory
		git clone "http://github.com/"$username"/"$repository".git" $directory
	fi
	rmtmp
	exit 0
fi

if test $1 = "remote"  -o $1 = "r" ;then
	now=$(pwd)
	arg=$(basename ${now})
	echo -n username:
	read user
	git remote rm origin
	git remote add origin https://github.com/${user}/${arg}
	rmtmp
	exit 0
fi

